rules_version = '2';

// see https://github.com/firebase/firebase-tools/issues/2067#issuecomment-605202281
function getFromDB(path) {
  return exists(path) ? get(path).data : null;
}

function isPublished() {
  return ('published' in resource.data) && resource.data.published == true
}

service cloud.firestore { 
  match /databases/{database}/documents {

    function getLoggedUser() {
      return getFromDB(/databases/$(database)/documents/users/$(request.auth.uid))
    }

    function isAdmin() {
    	return getLoggedUser().isAdmin == true
    }

    function isModerator() {
    	return getLoggedUser().isModerator == true
    }

    function isUser(uid) {
    	return request.auth.uid == uid
    }

    function isOwner() {
      return resource.data.owner_id == request.auth.uid 
    }

    // anybody can read the photos but only admin can write
    match /photos/{photoId} {
      // allow read: if request.auth.uid != null;
      allow read: if isPublished() || isOwner() || isModerator() ;

      // allow create: if request.auth.uid != null;
			allow create: if true;

      allow update: if isModerator();

      // allow update: if resource.data.owner_id == request.auth.uid && resource.data.moderated=null

      allow write: if isAdmin();
    }

    // anybody can create a feedback but only login user can update
    // only moderator or admin can read and update the feedback
    match /feedbacks/{feedback} {

      allow create: if true;

      allow read: if isModerator() || isAdmin();
      allow update: if isModerator() || isAdmin();

      //allow update: if resource.data.owner_id == request.auth.uid

      // allow delete: if isModerator() || isAdmin();
    }

    // data written by admin
    match /users/{uid} {
    	allow read: if isAdmin() || isUser(uid);
      allow write: if isAdmin();
    }

    // Collection with system data. The Doc stats contains statistics.
    match /sys/stats {
      allow read: if true;
    }

    // some extra config
    match /sys/config {
      allow read: if true;
    }
    
    // data written by admin
    match /missions/{missionId} {
    
      function isMissionOwner() {
        return get(/databases/$(database)/documents/missions/$(missionId)).data.ownerUserId == request.auth.uid;
      }	
      
      function isPrivateMission() {
        return get(/databases/$(database)/documents/missions/$(missionId)).data.isPrivate == true;
      }	
    
      allow create: if true;
    	allow read: if true;
      // Workaround as true because people need to be able to add themselvse to public missions
      // and add themselves as pending members to private missions.
      allow write: if true;
    }

    match /categories {
    	allow read: if true
    }
    
    match /categories/{categoryId} {
    	allow read: if true
      allow write: if isModerator() || isAdmin();
    }
    
    match /brands {
    	allow read: if true
    }
    
    match /brands/{brandId} {
    	allow read: if true
      allow write: if isModerator() || isAdmin();
    }
  }
}
